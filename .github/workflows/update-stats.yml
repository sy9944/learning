name: Update Learning Statistics

on:
  issues:
    types: [opened, closed, labeled, unlabeled]
  schedule:
    # 毎日午前9時（UTC）に実行
    - cron: '0 9 * * *'
  workflow_dispatch: # 手動実行可能

jobs:
  update-stats:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      issues: write
      
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          
      - name: Install dependencies
        run: |
          pip install requests PyGithub
          
      - name: Create update script
        run: |
          cat > update_stats.py << 'EOF'
          import os
          import requests
          from datetime import datetime
          import json
          from github import Github
          
          def get_learning_stats(repo):
              """技術ラベルごとにIssueを集計し統計情報を生成"""
              issues = repo.get_issues(state='all')
              stats = {
                  'total_learning_topics': 0,
                  'completed_topics': 0,
                  'in_progress_topics': 0,
                  'labels': {}, # ラベルごとの集計
                  'this_month_completed': 0,
                  'this_year_completed': 0
              }
              
              current_year = datetime.now().year
              current_month = datetime.now().month
              
              for issue in issues:
                  stats['total_learning_topics'] += 1
                  
                  # ステータス分析
                  if issue.state == 'closed':
                      stats['completed_topics'] += 1
                      if issue.closed_at:
                          if issue.closed_at.year == current_year:
                              stats['this_year_completed'] += 1
                              if issue.closed_at.month == current_month:
                                  stats['this_month_completed'] += 1
                  else:
                      stats['in_progress_topics'] += 1
                  
                  # ラベル分析
                  for label in issue.labels:
                    label_name = label.name
                    if label_name not in stats['labels']:
                        stats['labels'][label_name] = {'total': 0, 'completed': 0}
                    stats['labels'][label_name]['total'] += 1
                    if issue.state == 'closed':
                        stats['labels'][label_name]['completed'] += 1
                        
              return stats
          
          def update_readme(stats):
              """README.mdを更新"""
              now = datetime.now().strftime('%Y-%m-%d %H:%M:%S UTC')
              
              readme_lines = [
                  "## 📊 学習統計",
                  "",
                  "### 全体サマリー",
                  f"- **総学習トピック数**: {stats['total_learning_topics']}",
                  f"- **完了済み**: {stats['completed_topics']}",
                  f"- **進行中**: {stats['in_progress_topics']}",
                  f"- **今月完了**: {stats['this_month_completed']}",
                  f"- **今年完了**: {stats['this_year_completed']}",
                  "",
                  "### 技術別統計"
              ]
              
              if stats['labels']:
                  for label, data in stats['labels'].items():
                      completion_rate = (data['completed'] / data['total'] * 100) if data['total'] > 0 else 0
                      readme_lines.append(f"- **{label}**: {data['completed']}/{data['total']} ({completion_rate:.1f}%完了)")
              else:
                  readme_lines.append("データの蓄積中...")
              
              readme_lines.extend([
                  "## 📈 最新更新",
                  "",
                  f"最終更新: {now}",
              ])
              
              return "\n".join(readme_lines)
          
          # メイン処理
          def main():
              token = os.environ['GITHUB_TOKEN']
              repo_owner = os.environ['REPO_OWNER']
              repo_name = os.environ['REPO_NAME']
              
              g = Github(token)
              repo = g.get_repo(f"{repo_owner}/{repo_name}")
              
              try:
                  # 統計取得
                  stats = get_learning_stats(repo)
                  
                  # README更新
                  new_readme = update_readme(stats)
                  
                  # ファイル更新
                  try:
                      readme_file = repo.get_contents("README.auto.md")
                      repo.update_file("README.auto.md", "📊 Update learning statistics [automated]", new_readme, readme_file.sha)
                  except:
                      repo.create_file("README.auto.md", "📊 Create learning statistics [automated]", new_readme)
                      
                  print("✅ Learning statistics updated successfully!")
                  
              except Exception as e:
                  print(f"❌ Error: {e}")
                  # エラーでもワークフローを失敗させない
                  pass
          
          if __name__ == "__main__":
              main()
          EOF
          
      - name: Update learning statistics
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          REPO_OWNER: ${{ github.repository_owner }}
          REPO_NAME: ${{ github.event.repository.name }}
        run: |
          python update_stats.py

      - name: Combine README files
        run: |
          cat README.manual.md >> README.md
          cat README.auto.md >> README.md
          
      - name: Commit changes
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add README.md README.auto.md
          if git diff --staged --quiet; then
            echo "No changes to commit"
          else
            git commit -m "📊 Update learning statistics [automated]"
            git pull --rebase
            git push
          fi